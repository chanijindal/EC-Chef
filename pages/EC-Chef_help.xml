<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"

    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

    <head>

        <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org" />

        <meta content="text/html; charset=us-ascii" http-equiv="content-type" />

        <title>Aboout the ElectricFlow Plugin for Chef</title>

        <link rel="stylesheet" href="../../plugins/@PLUGIN_KEY@/pluginhelp.css" type="text/css" media="screen" />

    </head>

    <body>

        <div class="help">

            <h1 class="pluginname">Chef</h1>
            <p>Plugin Version @PLUGIN_VERSION@</p>
            <hr style="margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;" 
            noshade="noshade" />

        <p>Revised: July 1, 2015</p>
				
				<h1>Contents</h1>
				
				<ul>
				<li><p><a href="#overview">Overview</a></p></li>
				<li><p><a href="#setupconfig">Setting Up the Plugin Configuration</a></p></li>
				<li><p><a href="#procedures">Plugin Procedures</a></p></li>
				<ul>
				<li><a href="#AddRecipesToNodeRunList">AddRecipesToNodeRunList</a></li>
				<li><a href="#DownloadCookbookFromRepository">DownloadCookbookFromRepository</a></li>
				<li><a href="#InstallCookbookOnClient">InstallCookbookOnClient</a></li>
				<li><a href="#RunChefClient">RunChefClient</a></li>
				<li><a href="#UploadCookbooksToServer">UploadCookbooksToServer</a></li>
				</ul>
				<li><p><a href="#example">Examples and Use Cases</a></p></li>
				<li><p><a href="#rns">Release Notes</a></p></li>
				</ul>
				
				<p><b>Note:</b> The <i>_DeleteNode</i> and <i>_RegisterAndConvergeNode</i> procedures are internal procedures that run automatically 
				when you provision cloud resources for dynamic environments. Do not run these procedures.</p>			 
				
				<h1 id="overview">Overview</h1>           

            <p>Chef is an open-source systems integration framework built specifically for automating the cloud. No matter how complex 
						the realities of your business, Chef makes it easy to deploy servers and scale applications throughout your entire infrastructure. 
						Because it combines the fundamental elements of configuration management and service-oriented architectures with the full power of 
						Ruby, Chef makes it easy to create an elegant, fully automated infrastructure.</p>

            <p>Chef lets you create perfect clones of QA environments, pre-production environments, partner preview environments, and more. 
						Once automated, the blueprint for your infrastructure lets you build or rebuild automatically in minutes or hours, not weeks or months. 
						When you take those environments live and reality intrudes, Chef gives you endless flexibility to adapt on the fly. We all know business 
						is "a series of managed disasters." Chef lets you deal with them quickly, accurately, and intelligently. </p>

            <p>For more information, go to the <a href="http://www.opscode.com/chef/">Chef home page</a>.</p>

            <h2>ElectricFlow Integration to Chef</h2>

            <p>This plugin interacts with the Chef shell through the ElectricFlow agent. You can perform different actions using the Chef utility to get 
						the same results as when using a command-line interface. This plugin includes procedures that</p>
						<ul>
						<li>Download cookbooks from the Opscode repository to the local node</li>
						<li>Download cookbooks from the Opscode repository and installing them on the local node (via Git)</li>
						<li>Upload cookbooks from the local node to the Chef server</li>
						<li>Add recipes to a node run-list</li>
						<li>Apply a configuration defined on a node run-list and applied to a node</li>
						</ul>
						
            <p>ElectricFlow adds capabilities such as</p>
						<ul>
						<li>Parameter checking</li>
						<li>Easy selection of functionalities using check boxes</li>
						<li>Combination boxes</li>
						<li>Historical log reports</li>
						<li>Procedure duration statistics</li>
						<li>Simple credentials attachment</li>
						<li>Real-time analysis of logs</li>
						</ul>

        <h2>Supported Versions</h2>

            <p>This plugin was developed and tested against Chef version 10.12.0.</p>

        <p>IMPORTANT: For all parameter descriptions in the following sections, the required parameters are in <span class='required'>bold italics</span>.</p>
		
		<p>IMPORTANT: In the ElectricFlow UI, go to the Home page, open the Main Menu, and click <b>Admin</b> > <b>Plugins</b> to open the Plugin Manager.</p>
           
               <div id="CreateConfiguration"> <a name='CreateConfiguration' id="CreateConfiguration"></a> 

        <h1 id="setupconfig">Setting Up the Plugin Configuration</h1>

            <!-- If the plugin has separate configuration procedures, include this section; If not, omit 
						this whole section. We do not need a configuration section that just says "There is no 
						configuration for this plugin." -->

            <p>Plugin configurations are sets of parameters that apply across some or all of the plugin procedures. 
						They reduce repetition of common values, create predefined sets of parameters for end users, and 
						store credentials securely. Each configuration has a unique name that is automatically entered in 
						designated parameters in the procedures.</p>
						
						<h2>Input</h2>
						
					  <ol>
		            <li>Go to <b>Administration</b> > <b>Plugins</b> to open the Plugin Manager.</li>
		            <li>Find the EC-Chef row.</li>
		            <li>Click <b>Configure</b> to open the Chef Configurations page.</li> 	
		            <li>Click <b>Create Configuration</b>.</li>
		            <li>Create a Chef configuration by entering the following information and clicking <b>OK</b>. <br />
								Remember that you might need to create additional configurations later.</li>

            <table class="grid">
  							<thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class='required'>Configuration Name</td>
                        <td>Unique name for the configuration. </td>
                    </tr>
										<tr>
                        <td>Description</td>
                        <td>Description of the configuration, such as <i>Chef configuration</i>.</td>
                    </tr>
                    <tr>
                        <td class='required'>Chef Server URL</td>
                        <td>Private key for authentication.<br />
												Enter the <b>User Name</b> and <b>Private Key</b>.</td>
                    </tr>
                  </tbody>
            </table> 

						<br />
						<img src="../../plugins/@PLUGIN_KEY@/images/createconfig.png" />
						<br />

			      </ol>
						
						<h2>Output</h2>	 
		
			      <p>The Chef Configurations page now shows the new configuration.</p>
						
				</div>		
				
		<h1 id="procedures">Plugin Procedures</h1>
				
		
		<div id="AddRecipesToNodeRunList"><a name='AddRecipesToNodeRunList' id="AddRecipesToNodeRunList"></a>

            <h2>AddRecipesToNodeRunList Procedure</h2>
						
						<p>The following procedure adds recipes and roles to a node run-list. Run-list items are not validated against the Chef server.</p>
						
						<p>The command syntax is: &lt;Knife Path&gt; node run_list add &lt;Node Name&gt; &lt;Run-List Items&gt; &lt;Options&gt;</p>

						<h3>Input</h3>
						
						<ol>
						<li>Go to the AddRecipesToNodeRunList procedure.</li>
						<li>Enter the following parameters:<br />
            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class='required'>Knife Path</td>
                        <td>Path to the knife executable, such as <i>/usr/bin/knife</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td class='required'>Configuration File</td>
                        <td>Path to the configuration file, such as <i>root/.chef/knife.rb</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td>Server URL</td>
                        <td>URL of the Chef server.</td>
                    </tr>
                    <tr>
                        <td class='required'>Node Name</td>
                        <td>Name of the node to which recipes are added. (Required)</td>
                    </tr>
                    <tr>
                        <td>Run-List Items</td>
                        <td>Run-list items to add to the node run-list. You must enclose the items in quotes when roles are added, 
												roles are combined with recipes, the fully qualified recipe format is used, or 
												the cookbook recipe format is used. The run-list items are not validated against the Chef server.</td>
                    </tr>
                    <tr>
                        <td>Verbose</td>
                        <td>Displays the more-verbose output format when checked.</td>
                    </tr>
                    <tr>
                        <td>After Item</td>
                        <td>Item in the node run-list that determines where new items are added. The new items are added to the node run-list 
												after the specified item, such as <i>recipe[my_recipe]</i>.</td>
                    </tr>
                </tbody>
            </table>
            </li>
						
						<br />
					 	<img src="../../plugins/@PLUGIN_KEY@/images/Chef-4.png" />
						<br />

						</ol>   
						
						<h3>Output</h3>
						
						<p>After the job runs, you can view the results on the Job Details page in ElectricFlow. In the <b>AddRecipesToNodeRunList</b> step, 
						click the Log button to see the diagnostic information.</p>
																	
        </div>
				
				<div id="DownloadCookbookFromRepository"><a name='DownloadCookbookFromRepository' id="DownloadCookbookFromRepository"></a>

            <h2>DownloadCookbookFromRepository Procedure</h2>
						
						<p>The following procedure downloads a specific cookbook from the Opscode repository.</p>
						
						<p>The command syntax is: &lt;Knife Path&gt; cookbook site download &lt;Cookbook Name&gt; &lt;Options&gt;</p>

						<h3>Input</h3>
						
						<ol>
						<li>Go to the DownloadCookbookFromRepository procedure.</li>
						<li>Enter the following parameters:<br />
            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class='required'>Knife Path</td>
                        <td>Path to the knife executable, such as <i>/usr/bin/knife</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td class='required'>Configuration File</td>
                        <td>Path to the configuration file, such as <i>/root/.chef/knife.rb</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td>Chef Server URL</td>
                        <td>URL of the Chef server.</td>
                    </tr>
                    <tr>
                        <td class='required'>Cookbook Name</td>
                        <td>Name of the cookbook to download. (Required)</td>
                    </tr>
                    <tr>
                        <td>Cookbook Version</td>
                        <td>Cookbook version to download. If this field is blank, the latest version is downloaded.</td>
                    </tr>
                    <tr>
                        <td>Force</td>
                        <td>Downloads a deprecated cookbook.</td>
                    </tr>
                    <tr>
                        <td>Verbose</td>
                        <td>Displays the more verbose output format.</td>
                    </tr>
                    <tr>
                        <td>File Name</td>
                        <td>Name of the file to which the cookbook is written. The file extension is tar.gz. If this field is blank,
												the name of the default cookbook is used.</td>
                    </tr>
                    <tr>
                        <td>Download To</td>
                        <td>Path to which the cookbook is downloaded. If this field is blank, the cookbook is downloaded to the current workspace.</td>
                    </tr>
                </tbody>
            </table>
            </li>
						
						<br />
					 	<img src="../../plugins/@PLUGIN_KEY@/images/Chef-1.png" />
						<br />

						</ol>   
						
						<h3>Output</h3>
						
						<p>After the job runs, you can view the results on the Job Details page in ElectricFlow. In the <b>DownloadCookbookFromRepository</b> step, 
						click the Log button to see the diagnostic information.</p>
																	
        </div>

        <div id="InstallCookbookOnClient"><a name='InstallCookbookOnClient' id="InstallCookbookOnClient"></a>

            <h2>InstallCookbookOnClient Procedure</h2>
						
						<p>The following procedure installs a specific cookbook on a Chef client.</p>
						
						<p>The command syntax is: &lt;Knife Path&gt; cookbook site download &lt;Cookbook Name&gt; &lt;Options&gt;</p>

						<h3>Input</h3>
						
						<ol>
						<li>Go to the InstallCookbookOnClient procedure.</li>
						<li>Enter the following parameters:<br />
           <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class='required'>Knife Path</td>
                        <td>Path to the knife executable, such as <i>/usr/bin/knife</i> (the default value).  (Required)</td>
                    </tr>
                    <tr>
                        <td class='required'>Configuration File</td>
                        <td>Path to the configuration file, such as <i>/root/.chef/knife.rb</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td>Chef Server URL</td>
                        <td>URL of the Chef server.</td>
                    </tr>
                    <tr>
                        <td class='required'>Cookbook Name</td>
                        <td>Name of the cookbook to download. (Required)</td>
                    </tr>
                    <tr>
                        <td>Cookbook Version</td>
                        <td>Cookbook version to download. If this field is blank, the latest version is downloaded.</td>
                    </tr>
                    <tr>
                        <td>No Dependencies</td>
                        <td>Cookbook dependencies are not installed automatically when this checkbox is checked.</td>
                    </tr>
                    <tr>
                        <td>Verbose</td>
                        <td>Displays the more-verbose output format when checked.</td>
                    </tr>
                    <tr>
                        <td>Cookbooks Path</td>
                        <td>Path where the cookbook is installed. You should use the path where all the cookbooks are stored,
												such as <i>/etc/chef/cookbooks</i> (the default value).</td>
                    </tr>
                    <tr>
                        <td>Branch To Work With</td>
                        <td>Default branch with which to work. If the field is blank, the default branch is <i>master</i>.</td>
                    </tr>
                </tbody>
            </table>
            </li>
						
						<br />
					 	<img src="../../plugins/@PLUGIN_KEY@/images/Chef-1.png" />
						<br />

						</ol>   
						
						<h3>Output</h3>
						
						<p>After the job runs, you can view the results on the Job Details page in ElectricFlow. In the <b>InstallCookbookOnClient</b> step, 
						click the Log button to see the diagnostic information.</p>
																	
         </div>
				
				 <div id="RunChefClient"><a name='RunChefClient' id="RunChefClient"></a>

            <h2>RunChefClient Procedure</h2>
						
						<p>The following procedure runs a chef-client on a node. A chef-client is an agent that performs the steps specified in the configuration file.</p>
						
						<p>The command syntax is: &lt;Chef-client Path&gt; &lt;Options&gt;</p>

						<h3>Input</h3>
						
						<ol>
						<li>Go to the RunChefClient procedure.</li>
						<li>Enter the following parameters:<br />
            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class='required'>Chef-client Path</td>
                        <td>Path to the chef-client (executable), such as <i>/usr/bin/chef-client</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td class='required'>Configuration File</td>
                        <td>Path to the configuration file, such as <i>/etc/chef/client.rb</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td>Chef Server URL</td>
                        <td>URL of the Chef server.</td>
                    </tr>
                    <tr>
                        <td>Node Name</td>
                        <td>Name of the node.</td>
                    </tr>
                    <tr>
                        <td>Replace Current Run-List</td>
                        <td>New run-list of items to place instead of those in the current run-list.</td>
                    </tr>
                    <tr>
                        <td>JSON Attributes Definition</td>
                        <td>The JSON file or URL from which to get the attributes.</td>
                    </tr>
                    <tr>
                        <td>Daemonize</td>
                        <td>Runs the executable as a daemon when checked.</td>
                    </tr>
                    <tr>
                        <td>Interval(seconds)</td>
                        <td>Frequency in seconds at which the chef-client runs.</td>
                    </tr>
                    <tr>
                        <td>Log Level</td>
                        <td>Log level that is stored in the log file: <b>Debug</b>, <b>Information</b>, <b>Warning</b>, <b>Error</b>, or <b>Fatal</b>.</td>
                    </tr>
                    <tr>

                        <td>Additional Commands</td>
                        <td>Additional commands to run the chef-client.</td>
                    </tr>
                </tbody>
            </table>
            </li>
						
						<br />
					 	<img src="../../plugins/@PLUGIN_KEY@/images/Chef-5.png" />
						<br />

						</ol>   
						
						<h3>Output</h3>
						
						<p>After the job runs, you can view the results on the Job Details page in ElectricFlow. In the <b>RunChefClient</b> step, 
						click the Log button to see the diagnostic information.</p>
																	
        </div>
				
				<div id="UploadCookbooksToServer"><a name='UploadCookbooksToServer' id="UploadCookbooksToServer"></a>

            <h2>UploadCookbooksToServer Procedure</h2>
						
						<p>The following procedure uploads one or more cookbooks from your local cookbook repositories to the Chef server. Only cookbooks that 
						are not stored on the server are uploaded.</p>
						
						<p>The command syntax is: &lt;Knife Path&gt; cookbook upload &lt;Cookbooks&gt; &lt;Options&gt;</p>

						<h3>Input</h3>
						
						<ol>
						<li>Go to the UploadCookbooksToServer procedure.</li>
						<li>Enter the following parameters:<br />
            <table class="grid">
                <thead>
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class='required'>Knife Path</td>
                        <td>Path to the knife executable, such as <i>/usr/bin/knife</i> (default value). (Required)</td>
                    </tr>
                    <tr>
                        <td class='required'>Configuration File</td>
                        <td>Path to the configuration file, such as <i>/root/.chef/knife.rb</i> (the default value). (Required)</td>
                    </tr>
                    <tr>
                        <td>Server URL</td>
                        <td>URL of the Chef server.</td>
                    </tr>
                    <tr>
                        <td class='required'>Cookbook Names</td>
                        <td>Names of one or more cookbooks to upload, separated by spaces. (Required)</td>
                    </tr>
                    <tr>
                        <td>Include All Cookbooks</td>
                        <td>Uploads all cookbooks when checked.</td>
                    </tr>
                    <tr>
                        <td>Cookbooks Paths</td>
                        <td>List of paths to one or more cookbooks, separated by colons, such as <i>/etc/chef/cookbooks/:/etc/chef/more_cookbooks</i>.</td>
                    </tr>
                    <tr>
                        <td>Include Dependencies</td>
                        <td>Loads cookbooks upon which a cookbook is dependent when checked.</td>
                    </tr>
                    <tr>
                        <td>Verbose</td>
                        <td>Displays more-verbose output when checked.</td>
                    </tr>
                    <tr>
                        <td>Additional Commands</td>
                        <td>Additional commands to upload cookbooks.</td>
                    </tr>
                </tbody>
            </table>
            </li>
						
						<br />
					 	<img src="../../plugins/@PLUGIN_KEY@/images/Chef-3.png" />
						<br />

						</ol>   
						
						<h3>Output</h3>
						
						<p>After the job runs, you can view the results on the Job Details page in ElectricFlow. In the <b>UploadCookbooksToServer</b> step, 
						click the Log button to see the diagnostic information.</p>
																	
        </div>

        <h1 id="example">Examples and Use Cases</h1>

        <h2>Install the MySQL Cookbook Example</h2>
				<p>The following dialog box shows how to install a cookbook on a Chef client:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-6.png" alt="screenshot" />

        <h3>Opscode Repository Page for the MySQL Cookbook</h3>
				<p>The following information appears in the Opscode respository page in the Chef UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-7.png" alt="screenshot" />

        <h3>Job Summary</h3>
				<p>The following information appears in the Job Details page in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-8.png" alt="screenshot" />
				
				<h3>Summary of the Generated Log Information </h3>
				<p>The following information appears when you click the Log button for a specific step in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-9.png" alt="screenshot" />

        <h3>MySQL Cookbook and Dependencies</h3>
        <p>The following information appears in the Chef UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-10.png" alt="screenshot" />    

        <h3>Successful Installation of MySQL Cookbook Content</h3>
        <p>The following information appears in the Chef UI after you run the InstallCookbookOnClient procedure:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-11.png" alt="screenshot" />

        <h2>Upload MySQL Cookbook to Server Example</h2>
				<p>The following dialog box shows how to upload a cookbook to a Chef server:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-12.png" alt="screenshot" />

        <h3>Cookbook List in the Chef Server Web UI</h3>
        <p>The following information appears in the Cookbook list in the Chef server UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-13.png" alt="screenshot" />

        <h3>Job Summary</h3>
        <p>The following information appears in the Job Details page in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-14.png" alt="screenshot" />

        <h3>Summary of the Generated Log Information</h3>
        <p>The following information appears when you click the Log button for a specific step in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-15.png" alt="screenshot" />

        <h3>MySQL Cookbook and Dependencies on Server</h3>
        <p>The following information appears in the Chef UI after you run the UploadCookbooksToServer procedure:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-16.png" alt="screenshot" />     

        <h2>Add MySQL and Create_File Recipe to Node Example</h2>
        <p>The following dialog box shows how to add recipes to a node:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-17.png" alt="screenshot" />

        <h3>Current Run-List of the ubuntu-client Node</h3>
        <p>The following information appears in the run-list for a node in the Chef UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-18.png" alt="screenshot" />

        <h3>Job Summary</h3>
        <p>The following information appears in the Job Details page in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-19.png" alt="screenshot" />

        <h3>Summary of the Log Generated</h3>
        <p>The following information appears when you click the Log button for a specific step in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-20.png" alt="screenshot" />

        <h3>Updated Run-List of the ubuntu-client Node</h3>
        <p>The following information appears in the run-list for a node in the Chef UI after the AddRecipesToNodeRunList procedure runs:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-21.png" alt="screenshot" />

        <h2>Run Chef Client Example—File Creation</h2>
				<p>The following dialog box shows how to run a chef-client on a node.</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-22.png" alt="screenshot" />

        <h3>Current Run-List of the ubuntu-client Node</h3>
        <p>The following information appears in the run-list for a node in the Chef UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-23.png" alt="screenshot" />

        <h3>Job Summary</h3>
        <p>The following information appears in the Job Details page in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-24.png" alt="screenshot" />

        <h3>Summary of the Generated Log Information</h3>
        <p>The following information appears when you click the Log button for a specific step in the ElectricFlow UI:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-25.png" alt="screenshot" />

        <h3>Created File on the ubuntu-client Node</h3>
        <p>The following information appears in the Chef UI after the RunChefClient procedure runs:</p>
        <img src="../../plugins/@PLUGIN_KEY@/images/Chef-26.png" alt="screenshot" />

        <h1 id="rns">Release Notes</h1>

		
        <h2>@PLUGIN_KEY@-1.1.3</h2>
        <ul>
            <li>Renamed ElectricCommander to ElectricFlow.
            </li>
        </ul>
		
        <h2>@PLUGIN_KEY@-1.1.2</h2>
        <ul>
            <li>Added a check in the _RegisterAndConvergeNode procedure to test whether the ElectricFlow agent running the procedure can communicate with the ElectricFlow server.
            This is required to identify any network communication issues between the agent and the server, especially when the agent is running on a dynamically provisioned cloud instance.
            </li>
        </ul>
        <h2>@PLUGIN_KEY@-1.1.1</h2>
        <ul>
            <li>Fixed the _DeleteNode procedure for Windows.</li>
        </ul>

            <h2>@PLUGIN_KEY@-1.1.0</h2>
        <ul>
            <li>Added properties in the ec_configurationmanagement_plugin property sheet to enable the EC-Chef plugin for configuration management.</li>
        </ul>

        <h2>@PLUGIN_KEY@-1.0.1</h2>
        <ul>
            <li>Fixed the Help page.</li>
        </ul>
     
        <h2>@PLUGIN_KEY@-1.0.0</h2>
        <ul>
            <li>Introduced the EC-Chef plugin.</li>
        </ul>
        </div>

    </body>

</html>